import asyncio
import base64
import platform

import cv2
import logging
import socketio
from tkinter import messagebox
from _thread import start_new_thread


ENDPOINT_URL = 'ws://localhost:8080'

socket = socketio.AsyncClient(
    reconnection=True,
    logger=True,
)

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')


@socket.on(event='message', namespace='/cams')
async def handle_show_message(data: dict):
    message = data.get('message', 'Вас разбудили нахуй.')
    start_new_thread(messagebox.showinfo, ("Вам сообщение", message))


@socket.on(event='connect')
async def handle_client_connect(*_):
    logging.info("Клиент успешно подключен к сети.")


async def connect():
    await socket.connect(
        url=ENDPOINT_URL,
        transports=['websocket', 'polling'],
        wait_timeout=2,
        namespaces=[
            '/cams'
        ],
        auth={
            'computer_name': platform.node(),
        }
    )
    await socket.start_background_task(capture_and_stream)


async def capture_and_stream():
    logging.debug("Попытка открыть веб-камеру...")
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        logging.error("Ошибка: не удалось открыть веб-камеру.")
        return

    logging.info(f"Трансляция началась. Видео отправляется на {ENDPOINT_URL}")
    logging.info("Для завершения нажмите Ctrl+C.")

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                logging.error("Ошибка: не удалось получить кадр.")
                break

            logging.debug("Преобразование кадра в JPEG...")
            _, buffer = cv2.imencode(".jpg", frame)
            jpg_as_text = base64.b64encode(buffer)
            logging.debug("Попытка отправить кадр на сервер...")
            try:
                await socket.emit(event='cam', data={'picture': jpg_as_text.decode('utf-8')}, namespace='/cams')
                await socket.sleep(0.2)
            except Exception as e:
                logging.error(f"Ошибка при отправке кадра: {e}")
                break

    finally:
        cap.release()
        logging.info("Трансляция завершена.")

if __name__ == '__main__':
    asyncio.run(connect())
